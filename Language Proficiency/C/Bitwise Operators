Complete the calculate_the_maximum function in the editor below.

calculate_the_maximum has the following parameters:

int n: the highest number to consider
int k: the result of a comparison must be lower than this number to be considered
Prints

Print the maximum values for the and, or and xor comparisons, each on a separate line.

Sample Input 0

5 4
Sample Output 0

2
3
3

SOLUTION:
void calculate_the_maximum(int n, int k) {
  //Write your code here.
  int maxand = 0,  maxor = 0,  maxxor = 0;
  for(int i = 1; i < n;i++)
  {
      for(int j = 2; j<=n ;j++)
      {
        if (i == j)                                             //This can be ignored if we intialize the value of j to be j+1
        {
            continue;
        }
        if((i & j) < k && (i & j) >= maxand)                //Calculating maxand, maxor and maxxor
        {
            maxand = i & j;
        }
        if((i | j) < k && (i | j) >= maxor)
        {
            maxor = i | j;
        }
        if((i ^ j) < k && (i ^ j) >= maxxor)
        {
            maxxor = i ^ j;
        }
      }
  }
  
  printf("%d\n%d\n%d", maxand, maxor, maxxor);
}



BETTER SOLUTION:

void calculate_the_maximum(int n, int k) {
    printf("%d\n",((k-1)|k)<=n? (k-1):(k-2));
    printf("%d\n",((k-1)&(k-2))==0? (k==3?0:(k-2)) : (k-1) );                   //Explanation????? O(1)
    printf("%d\n", k-1);
}
