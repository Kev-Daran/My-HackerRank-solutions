Given a pointer to the head of a linked list and a specific position, determine the data value at that position. Count backwards from the tail node. The tail is at postion 0, its parent is at 1 and so on.


Function Description

Complete the getNode function in the editor below.

getNode has the following parameters:

SinglyLinkedListNode pointer head: refers to the head of the list
int positionFromTail: the item to retrieve
Returns

int: the value at the desired position


Sample Input

2
1
1
0
3
3
2
1
2
Sample Output

1
3


SOLUTION:
def getNode(llist, positionFromTail):
    # Write your code here
    temp = llist                
    ans = llist                         //We set 2 nodes to be equal to the head of the linked list
    DistanceFromTemp = 0                //We intend for temp to iterate ahead of ans, so we set a DistanceFromTemp value
    while temp != None:                 //We waant temp to go the end of the linked list

        if DistanceFromTemp > positionFromTail:     //If the distance from temp is greater than the positionfrom tail, we increment ans. This allows for the Distance from
            ans = ans.next                         //temp to be fixed as a result when temp reaches end of the linked list, our ans will be at positionfromtail elements
        temp = temp.next                           //behind temp, i.e, end of linked list and hence give us the required value
        DistanceFromTemp += 1
            
    return ans.data
